version: "3.8"

services:
  # Keycloak用のPostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: keycloak-postgres
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - keycloak-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5

  # アプリ1用のPostgreSQL
  postgres-app1:
    image: postgres:15-alpine
    container_name: postgres-app1
    environment:
      POSTGRES_DB: app1_todos
      POSTGRES_USER: app1user
      POSTGRES_PASSWORD: app1pass
    volumes:
      - postgres_app1_data:/var/lib/postgresql/data
      - ./webapp/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - keycloak-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app1user -d app1_todos"]
      interval: 10s
      timeout: 5s
      retries: 5

  # アプリ2用のPostgreSQL
  postgres-app2:
    image: postgres:15-alpine
    container_name: postgres-app2
    environment:
      POSTGRES_DB: app2_todos
      POSTGRES_USER: app2user
      POSTGRES_PASSWORD: app2pass
    volumes:
      - postgres_app2_data:/var/lib/postgresql/data
      - ./webapp/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - keycloak-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app2user -d app2_todos"]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak:
    image: quay.io/keycloak/keycloak:24.0
    container_name: keycloak
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KC_HOSTNAME: localhost
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080"
    command:
      - start-dev
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - keycloak-network
    volumes:
      - ./keycloak/import:/opt/keycloak/data/import

  webapp:
    build: ./webapp
    container_name: demo-webapp
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      APP_NAME: アプリ1
      APP_COLOR: "#667eea"
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_REALM: demo
      KEYCLOAK_CLIENT_ID: webapp
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET:-secret}
      SESSION_SECRET: ${SESSION_SECRET:-your-session-secret}
      APP_URL: http://localhost:3000
      DB_HOST: postgres-app1
      DB_NAME: app1_todos
      DB_USER: app1user
      DB_PASSWORD: app1pass
      DB_PORT: 5432
    depends_on:
      - keycloak
      - postgres-app1
    networks:
      - keycloak-network
  # ボリュームマウントを削除してDockerイメージを使用
  # volumes:
  #   - ./webapp:/app

  webapp2:
    build: ./webapp
    container_name: demo-webapp2
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      APP_NAME: アプリ2
      APP_COLOR: "#f093fb"
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_REALM: demo
      KEYCLOAK_CLIENT_ID: webapp2
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET2:-secret2}
      SESSION_SECRET: ${SESSION_SECRET2:-your-session-secret-2}
      APP_URL: http://localhost:3001
      DB_HOST: postgres-app2
      DB_NAME: app2_todos
      DB_USER: app2user
      DB_PASSWORD: app2pass
      DB_PORT: 5432
    depends_on:
      - keycloak
      - postgres-app2
    networks:
      - keycloak-network
# ボリュームマウントを削除してDockerイメージを使用
# volumes:
#   - ./webapp:/app

networks:
  keycloak-network:
    driver: bridge

volumes:
  postgres_data:
  postgres_app1_data:
  postgres_app2_data:
